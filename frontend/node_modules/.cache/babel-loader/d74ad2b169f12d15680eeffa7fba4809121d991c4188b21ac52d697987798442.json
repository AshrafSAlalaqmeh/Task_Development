{"ast":null,"code":"import service from \"./service\";\nimport { toast } from \"react-toastify\";\nexport const createProduct = async product => {\n  try {\n    const response = await service.post(\"/production/addingProduct\", product);\n    if (response.data.status) {\n      return response.data;\n    } else {\n      toast.error(response.data.message);\n    }\n  } catch (error) {\n    toast.error(error.response.data.message);\n  }\n};\nexport const updateProduct = async editedProduct => {\n  const paramsID = editedProduct.product_id;\n  try {\n    const response = await service.put(`production/${paramsID}`, {\n      editedProduct\n    });\n    if (response.data.status) {\n      return response.data;\n    } else {\n      toast.error(response.data.message);\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const deleteProduct = async productId => {\n  try {\n    const response = await service.patch(`production/${productId}`);\n    if (response.data.status) {\n      return response.data;\n    } else {\n      toast.error(response.data.message);\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getProduct = async ({\n  product_id,\n  price,\n  category,\n  availability_status\n}) => {\n  try {\n    let URL = `/production?`;\n    console.log(\"product_id\", product_id);\n    if (product_id) {\n      URL += `&product_id=${product_id}`;\n    }\n    if (price) {\n      URL += `&price=${price}`;\n    }\n    if (category) {\n      URL += `&category=${category}`;\n    }\n    if (availability_status) {\n      URL += `&availability_status=${availability_status}`;\n    }\n    const response = await service.get(URL);\n    if (response.data.status) {\n      return response.data;\n    } else {\n      toast.error(response.data.message);\n    }\n  } catch (error) {\n    toast.error(error.response.data.message);\n  }\n};","map":{"version":3,"names":["service","toast","createProduct","product","response","post","data","status","error","message","updateProduct","editedProduct","paramsID","product_id","put","deleteProduct","productId","patch","getProduct","price","category","availability_status","URL","console","log","get"],"sources":["D:/Task/Task_Development/frontend/src/services/products.js"],"sourcesContent":["import service from \"./service\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const createProduct = async (product) => {\r\n  try {\r\n    const response = await service.post(\"/production/addingProduct\", product);\r\n\r\n    if (response.data.status) {\r\n      return response.data;\r\n    } else {\r\n      toast.error(response.data.message);\r\n    }\r\n  } catch (error) {\r\n    toast.error(error.response.data.message);\r\n  }\r\n};\r\n\r\nexport const updateProduct = async (editedProduct) => {\r\n    const paramsID = editedProduct.product_id\r\n  try {\r\n    const response = await service.put(`production/${paramsID}`,{\r\n        editedProduct\r\n    });\r\n    if (response.data.status) {\r\n      return response.data;\r\n    } else {\r\n      toast.error(response.data.message);\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteProduct = async (productId) => {\r\n  try {\r\n    const response = await service.patch(`production/${productId}`);\r\n    if (response.data.status) {\r\n      return response.data;\r\n    } else {\r\n      toast.error(response.data.message);\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getProduct = async ({\r\n  product_id,\r\n  price,\r\n  category,\r\n  availability_status,\r\n}) => {\r\n  try {\r\n    let URL = `/production?`;\r\nconsole.log(\"product_id\",product_id);\r\n\r\n    if (product_id) {\r\n      URL += `&product_id=${product_id}`;\r\n    }\r\n    if (price) {\r\n      URL += `&price=${price}`;\r\n    }\r\n    if (category) {\r\n      URL += `&category=${category}`;\r\n    }\r\n    if (availability_status) {\r\n      URL += `&availability_status=${availability_status}`;\r\n    }\r\n\r\n    const response = await service.get(URL);\r\n\r\n    if (response.data.status) {\r\n      return response.data;\r\n    } else {\r\n      toast.error(response.data.message);\r\n    }\r\n  } catch (error) {\r\n    toast.error(error.response.data.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAAO,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,2BAA2B,EAAEF,OAAO,CAAC;IAEzE,IAAIC,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;MACxB,OAAOH,QAAQ,CAACE,IAAI;IACtB,CAAC,MAAM;MACLL,KAAK,CAACO,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;IACpC;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;EAC1C;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOC,aAAa,IAAK;EAClD,MAAMC,QAAQ,GAAGD,aAAa,CAACE,UAAU;EAC3C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMJ,OAAO,CAACc,GAAG,CAAC,cAAcF,QAAQ,EAAE,EAAC;MACxDD;IACJ,CAAC,CAAC;IACF,IAAIP,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;MACxB,OAAOH,QAAQ,CAACE,IAAI;IACtB,CAAC,MAAM;MACLL,KAAK,CAACO,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;IACpC;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMO,aAAa,GAAG,MAAOC,SAAS,IAAK;EAChD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMJ,OAAO,CAACiB,KAAK,CAAC,cAAcD,SAAS,EAAE,CAAC;IAC/D,IAAIZ,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;MACxB,OAAOH,QAAQ,CAACE,IAAI;IACtB,CAAC,MAAM;MACLL,KAAK,CAACO,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;IACpC;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG,MAAAA,CAAO;EAC/BL,UAAU;EACVM,KAAK;EACLC,QAAQ;EACRC;AACF,CAAC,KAAK;EACJ,IAAI;IACF,IAAIC,GAAG,GAAG,cAAc;IAC5BC,OAAO,CAACC,GAAG,CAAC,YAAY,EAACX,UAAU,CAAC;IAEhC,IAAIA,UAAU,EAAE;MACdS,GAAG,IAAI,eAAeT,UAAU,EAAE;IACpC;IACA,IAAIM,KAAK,EAAE;MACTG,GAAG,IAAI,UAAUH,KAAK,EAAE;IAC1B;IACA,IAAIC,QAAQ,EAAE;MACZE,GAAG,IAAI,aAAaF,QAAQ,EAAE;IAChC;IACA,IAAIC,mBAAmB,EAAE;MACvBC,GAAG,IAAI,wBAAwBD,mBAAmB,EAAE;IACtD;IAEA,MAAMjB,QAAQ,GAAG,MAAMJ,OAAO,CAACyB,GAAG,CAACH,GAAG,CAAC;IAEvC,IAAIlB,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;MACxB,OAAOH,QAAQ,CAACE,IAAI;IACtB,CAAC,MAAM;MACLL,KAAK,CAACO,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;IACpC;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;EAC1C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}