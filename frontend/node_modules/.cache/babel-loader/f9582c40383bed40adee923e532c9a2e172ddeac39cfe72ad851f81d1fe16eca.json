{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task\\\\Task_Development\\\\frontend\\\\src\\\\components\\\\ModalWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalWrapper = ({\n  isOpen,\n  toggle,\n  buildings,\n  setBuildings,\n  setCount,\n  selectedRow\n  // updateListingData,\n}) => {\n  _s();\n  const [name, setName] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.build_name) || \"\");\n  const [price, setPrice] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.build_status) || \"active\");\n  const [category, setCategory] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.build_name) || \"\");\n  const [description, setDescription] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.build_name) || \"\");\n  const [availability_status, setavailability_status] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.build_name) || \"\");\n\n  // const handleEditBuilding = async () => {\n  //     try {\n\n  //       const editedBuilding = {\n  //         build_id: selectedRow?.build_id,\n  //         build_name: name,\n  //         build_status: status,\n  //       };\n\n  //       const response = await editBuilding(editedBuilding);\n\n  //       if (response && response.status === \"success\") {\n  //         toast.success(t(\"buildings.validation.edit_msg\"));\n  //         updateListingData(editedBuilding);\n  //         toggle();\n  //       } else {\n  //         toast.error(t(\"buildings.validation.err_edit\"));\n  //       }\n  //     } catch (error) {\n  //       if (error.name === \"ValidationError\") {\n  //         const errors = {};\n  //         error.inner.forEach((e) => {\n  //           errors[e.path] = e.message;\n  //         });\n  //         setValidationErrors(errors);\n  //       }\n  //     }\n  //   };\n\n  const handleAddBuilding = async () => {\n    try {\n      const building = {\n        build_name: name,\n        build_status: status,\n        name\n        // price\n        // category\n        // description\n        // availability_status\n      };\n      const response = await createBuilding(building);\n      if (response && response.status === \"success\") {\n        setCount(prevCount => prevCount + 1);\n        toast.success(t(\"buildings.validation.add_msg\"));\n        setName(\"\");\n        setStatus(\"\");\n        building.build_id = response.message.build_id;\n        building.create_date = new Date();\n        building.edit_date = new Date();\n        const _buildings = [...buildings];\n        _buildings.unshift(building);\n        setBuildings(_buildings);\n        toggle();\n      } else {\n        toast.error(t(\"buildings.validation.err_add\"));\n      }\n    } catch (error) {\n      if (error.name === \"ValidationError\") {\n        const errors = {};\n        error.inner.forEach(e => {\n          errors[e.path] = e.message;\n        });\n        setValidationErrors(errors);\n      }\n    }\n  };\n  const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ModalWrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(ModalWrapper, \"Rs7afa0nc/gHvQ22pYLxgcwO0C8=\");\n_c = ModalWrapper;\nexport default ModalWrapper;\nvar _c;\n$RefreshReg$(_c, \"ModalWrapper\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ModalWrapper","isOpen","toggle","buildings","setBuildings","setCount","selectedRow","_s","name","setName","useState","build_name","price","setPrice","build_status","category","setCategory","description","setDescription","availability_status","setavailability_status","handleAddBuilding","building","status","response","createBuilding","prevCount","toast","success","t","setStatus","build_id","message","create_date","Date","edit_date","_buildings","unshift","error","errors","inner","forEach","e","path","setValidationErrors","handleAction","handleEditBuilding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Task/Task_Development/frontend/src/components/ModalWrapper.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst ModalWrapper = ({\r\n    isOpen,\r\n    toggle,\r\n    buildings,\r\n    setBuildings,\r\n    setCount,\r\n    selectedRow,\r\n    // updateListingData,\r\n  }) => {\r\n\r\n\r\n    const [name, setName] = useState(selectedRow?.build_name || \"\");\r\n    const [price, setPrice] = useState(selectedRow?.build_status || \"active\");\r\n    const [category, setCategory] = useState(selectedRow?.build_name || \"\");\r\n    const [description, setDescription] = useState(selectedRow?.build_name || \"\");\r\n    const [availability_status, setavailability_status] = useState(selectedRow?.build_name || \"\");\r\n\r\n    // const handleEditBuilding = async () => {\r\n    //     try {\r\n      \r\n    //       const editedBuilding = {\r\n    //         build_id: selectedRow?.build_id,\r\n    //         build_name: name,\r\n    //         build_status: status,\r\n    //       };\r\n    \r\n    //       const response = await editBuilding(editedBuilding);\r\n    \r\n    //       if (response && response.status === \"success\") {\r\n    //         toast.success(t(\"buildings.validation.edit_msg\"));\r\n    //         updateListingData(editedBuilding);\r\n    //         toggle();\r\n    //       } else {\r\n    //         toast.error(t(\"buildings.validation.err_edit\"));\r\n    //       }\r\n    //     } catch (error) {\r\n    //       if (error.name === \"ValidationError\") {\r\n    //         const errors = {};\r\n    //         error.inner.forEach((e) => {\r\n    //           errors[e.path] = e.message;\r\n    //         });\r\n    //         setValidationErrors(errors);\r\n    //       }\r\n    //     }\r\n    //   };\r\n      \r\n\r\n      \r\n\r\n    const handleAddBuilding = async () => {\r\n      try {\r\n        const building = {\r\n          build_name: name,\r\n          build_status: status,\r\n          name\r\n// price\r\n// category\r\n// description\r\n// availability_status\r\n        };\r\n  \r\n        const response = await createBuilding(building);\r\n  \r\n        if (response && response.status === \"success\") {\r\n          setCount((prevCount) => prevCount + 1);\r\n          toast.success(t(\"buildings.validation.add_msg\"));\r\n  \r\n          setName(\"\");\r\n          setStatus(\"\");\r\n  \r\n          building.build_id = response.message.build_id;\r\n          building.create_date = new Date();\r\n          building.edit_date = new Date();\r\n  \r\n          const _buildings = [...buildings];\r\n          _buildings.unshift(building);\r\n          setBuildings(_buildings);\r\n  \r\n          toggle();\r\n        } else {\r\n          toast.error(t(\"buildings.validation.err_add\"));\r\n        }\r\n      } catch (error) {\r\n        if (error.name === \"ValidationError\") {\r\n          const errors = {};\r\n          error.inner.forEach((e) => {\r\n            errors[e.path] = e.message;\r\n          });\r\n  \r\n          setValidationErrors(errors);\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\r\n  \r\n\r\n  return (\r\n    <div>ModalWrapper</div>\r\n  )\r\n}\r\n\r\nexport default ModalWrapper"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}