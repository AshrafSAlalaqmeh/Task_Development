{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task\\\\Task_Development\\\\frontend\\\\src\\\\components\\\\ModalWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { createProduct, updateProduct } from \"../../services/buildings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalWrapper = ({\n  isOpen,\n  toggle,\n  buildings,\n  setBuildings,\n  setCount,\n  selectedRow\n  // updateListingData,\n}) => {\n  _s();\n  const [name, setName] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.name) || \"\");\n  const [price, setPrice] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.price) || \"active\");\n  const [category, setCategory] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.category) || \"\");\n  const [description, setDescription] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.description) || \"\");\n  const [availabilityStatus, setAvailabilityStatus] = useState((selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.availabilityStatus) || \"\");\n\n  // const handleEditBuilding = async () => {\n  //     try {\n\n  //       const editedBuilding = {\n  //         build_id: selectedRow?.build_id,\n  //         build_name: name,\n  //         build_status: status,\n  //       };\n\n  //       const response = await editBuilding(editedBuilding);\n\n  //       if (response && response.status === \"success\") {\n  //         toast.success(t(\"buildings.validation.edit_msg\"));\n  //         updateListingData(editedBuilding);\n  //         toggle();\n  //       } else {\n  //         toast.error(t(\"buildings.validation.err_edit\"));\n  //       }\n  //     } catch (error) {\n  //       if (error.name === \"ValidationError\") {\n  //         const errors = {};\n  //         error.inner.forEach((e) => {\n  //           errors[e.path] = e.message;\n  //         });\n  //         setValidationErrors(errors);\n  //       }\n  //     }\n  //   };\n\n  const handleAddBuilding = async () => {\n    try {\n      const product = {\n        name: name,\n        price: price,\n        category: category,\n        description: description,\n        availabilityStatus: availabilityStatus\n      };\n      const response = await createProduct(product);\n      if (response && response.status === \"success\") {\n        toast.success(\"Adding Product Succussfly\");\n        setName(\"\");\n        setPrice;\n        setCategory;\n        setDescription;\n        building.build_id = response.message.build_id;\n        building.create_date = new Date();\n        building.edit_date = new Date();\n        const _buildings = [...buildings];\n        _buildings.unshift(building);\n        setBuildings(_buildings);\n        toggle();\n      } else {\n        toast.error(t(\"buildings.validation.err_add\"));\n      }\n    } catch (error) {\n      if (error.name === \"ValidationError\") {\n        const errors = {};\n        error.inner.forEach(e => {\n          errors[e.path] = e.message;\n        });\n        setValidationErrors(errors);\n      }\n    }\n  };\n  const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ModalWrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n};\n_s(ModalWrapper, \"VRB66GMlNJwqD6pafhHfRjzWnMM=\");\n_c = ModalWrapper;\nexport default ModalWrapper;\nvar _c;\n$RefreshReg$(_c, \"ModalWrapper\");","map":{"version":3,"names":["React","createProduct","updateProduct","jsxDEV","_jsxDEV","ModalWrapper","isOpen","toggle","buildings","setBuildings","setCount","selectedRow","_s","name","setName","useState","price","setPrice","category","setCategory","description","setDescription","availabilityStatus","setAvailabilityStatus","handleAddBuilding","product","response","status","toast","success","building","build_id","message","create_date","Date","edit_date","_buildings","unshift","error","t","errors","inner","forEach","e","path","setValidationErrors","handleAction","handleEditBuilding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Task/Task_Development/frontend/src/components/ModalWrapper.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { createProduct, updateProduct } from \"../../services/buildings\";\r\n\r\nconst ModalWrapper = ({\r\n  isOpen,\r\n  toggle,\r\n  buildings,\r\n  setBuildings,\r\n  setCount,\r\n  selectedRow,\r\n  // updateListingData,\r\n}) => {\r\n  const [name, setName] = useState(selectedRow?.name || \"\");\r\n  const [price, setPrice] = useState(selectedRow?.price || \"active\");\r\n  const [category, setCategory] = useState(selectedRow?.category || \"\");\r\n  const [description, setDescription] = useState(\r\n    selectedRow?.description || \"\"\r\n  );\r\n  const [availabilityStatus, setAvailabilityStatus] = useState(\r\n    selectedRow?.availabilityStatus || \"\"\r\n  );\r\n\r\n  // const handleEditBuilding = async () => {\r\n  //     try {\r\n\r\n  //       const editedBuilding = {\r\n  //         build_id: selectedRow?.build_id,\r\n  //         build_name: name,\r\n  //         build_status: status,\r\n  //       };\r\n\r\n  //       const response = await editBuilding(editedBuilding);\r\n\r\n  //       if (response && response.status === \"success\") {\r\n  //         toast.success(t(\"buildings.validation.edit_msg\"));\r\n  //         updateListingData(editedBuilding);\r\n  //         toggle();\r\n  //       } else {\r\n  //         toast.error(t(\"buildings.validation.err_edit\"));\r\n  //       }\r\n  //     } catch (error) {\r\n  //       if (error.name === \"ValidationError\") {\r\n  //         const errors = {};\r\n  //         error.inner.forEach((e) => {\r\n  //           errors[e.path] = e.message;\r\n  //         });\r\n  //         setValidationErrors(errors);\r\n  //       }\r\n  //     }\r\n  //   };\r\n\r\n  const handleAddBuilding = async () => {\r\n    try {\r\n      const product = {\r\n        name: name,\r\n        price: price,\r\n        category: category,\r\n        description: description,\r\n        availabilityStatus: availabilityStatus,\r\n      };\r\n\r\n      const response = await createProduct(product);\r\n\r\n      if (response && response.status === \"success\") {\r\n        toast.success(\"Adding Product Succussfly\");\r\n\r\n        setName(\"\");\r\n        setPrice\r\nsetCategory\r\nsetDescription\r\n\r\n        building.build_id = response.message.build_id;\r\n        building.create_date = new Date();\r\n        building.edit_date = new Date();\r\n\r\n        const _buildings = [...buildings];\r\n        _buildings.unshift(building);\r\n        setBuildings(_buildings);\r\n\r\n        toggle();\r\n      } else {\r\n        toast.error(t(\"buildings.validation.err_add\"));\r\n      }\r\n    } catch (error) {\r\n      if (error.name === \"ValidationError\") {\r\n        const errors = {};\r\n        error.inner.forEach((e) => {\r\n          errors[e.path] = e.message;\r\n        });\r\n\r\n        setValidationErrors(errors);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\r\n\r\n  return <div>ModalWrapper</div>;\r\n};\r\n\r\nexport default ModalWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}