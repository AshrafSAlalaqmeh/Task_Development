{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task\\\\Task_Development\\\\frontend\\\\src\\\\components\\\\ModalWrapper.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalWrapper = ({\n  isOpen,\n  toggle,\n  buildings,\n  setBuildings,\n  setCount,\n  selectedRow\n  // updateListingData,\n}) => {\n  // const handleEditBuilding = async () => {\n  //     try {\n\n  //       const editedBuilding = {\n  //         build_id: selectedRow?.build_id,\n  //         build_name: name,\n  //         build_status: status,\n  //       };\n\n  //       const response = await editBuilding(editedBuilding);\n\n  //       if (response && response.status === \"success\") {\n  //         toast.success(t(\"buildings.validation.edit_msg\"));\n  //         updateListingData(editedBuilding);\n  //         toggle();\n  //       } else {\n  //         toast.error(t(\"buildings.validation.err_edit\"));\n  //       }\n  //     } catch (error) {\n  //       if (error.name === \"ValidationError\") {\n  //         const errors = {};\n  //         error.inner.forEach((e) => {\n  //           errors[e.path] = e.message;\n  //         });\n  //         setValidationErrors(errors);\n  //       }\n  //     }\n  //   };\n\n  const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ModalWrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_c = ModalWrapper;\nexport default ModalWrapper;\nvar _c;\n$RefreshReg$(_c, \"ModalWrapper\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ModalWrapper","isOpen","toggle","buildings","setBuildings","setCount","selectedRow","handleAction","handleEditBuilding","handleAddBuilding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Task/Task_Development/frontend/src/components/ModalWrapper.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst ModalWrapper = ({\r\n    isOpen,\r\n    toggle,\r\n    buildings,\r\n    setBuildings,\r\n    setCount,\r\n    selectedRow,\r\n    // updateListingData,\r\n  }) => {\r\n\r\n\r\n\r\n\r\n    // const handleEditBuilding = async () => {\r\n    //     try {\r\n      \r\n    //       const editedBuilding = {\r\n    //         build_id: selectedRow?.build_id,\r\n    //         build_name: name,\r\n    //         build_status: status,\r\n    //       };\r\n    \r\n    //       const response = await editBuilding(editedBuilding);\r\n    \r\n    //       if (response && response.status === \"success\") {\r\n    //         toast.success(t(\"buildings.validation.edit_msg\"));\r\n    //         updateListingData(editedBuilding);\r\n    //         toggle();\r\n    //       } else {\r\n    //         toast.error(t(\"buildings.validation.err_edit\"));\r\n    //       }\r\n    //     } catch (error) {\r\n    //       if (error.name === \"ValidationError\") {\r\n    //         const errors = {};\r\n    //         error.inner.forEach((e) => {\r\n    //           errors[e.path] = e.message;\r\n    //         });\r\n    //         setValidationErrors(errors);\r\n    //       }\r\n    //     }\r\n    //   };\r\n      \r\n\r\n      \r\n\r\n\r\n\r\n\r\n    const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\r\n  \r\n\r\n  return (\r\n    <div>ModalWrapper</div>\r\n  )\r\n}\r\n\r\nexport default ModalWrapper"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,YAAY,GAAGA,CAAC;EAClBC,MAAM;EACNC,MAAM;EACNC,SAAS;EACTC,YAAY;EACZC,QAAQ;EACRC;EACA;AACF,CAAC,KAAK;EAKJ;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAQA,MAAMC,YAAY,GAAGD,WAAW,GAAGE,kBAAkB,GAAGC,iBAAiB;EAG3E,oBACEV,OAAA;IAAAW,QAAA,EAAK;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE3B,CAAC;AAAAC,EAAA,GAtDKf,YAAY;AAwDlB,eAAeA,YAAY;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}