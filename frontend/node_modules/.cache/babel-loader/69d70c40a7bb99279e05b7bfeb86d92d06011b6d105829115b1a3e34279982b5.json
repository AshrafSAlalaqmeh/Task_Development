{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task\\\\Task_Development\\\\frontend\\\\src\\\\components\\\\ModalWrapper.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalWrapper = ({\n  isOpen,\n  toggle,\n  buildings,\n  setBuildings,\n  setCount,\n  selectedRow\n  // updateListingData,\n}) => {\n  // const handleEditBuilding = async () => {\n  //     try {\n\n  //       const editedBuilding = {\n  //         build_id: selectedRow?.build_id,\n  //         build_name: name,\n  //         build_status: status,\n  //       };\n\n  //       const response = await editBuilding(editedBuilding);\n\n  //       if (response && response.status === \"success\") {\n  //         toast.success(t(\"buildings.validation.edit_msg\"));\n  //         updateListingData(editedBuilding);\n  //         toggle();\n  //       } else {\n  //         toast.error(t(\"buildings.validation.err_edit\"));\n  //       }\n  //     } catch (error) {\n  //       if (error.name === \"ValidationError\") {\n  //         const errors = {};\n  //         error.inner.forEach((e) => {\n  //           errors[e.path] = e.message;\n  //         });\n  //         setValidationErrors(errors);\n  //       }\n  //     }\n  //   };\n\n  const handleAddBuilding = async () => {\n    try {\n      await validationSchema.validate({\n        build_name: name,\n        build_status: status\n      }, {\n        abortEarly: false\n      });\n      const building = {\n        build_name: name,\n        build_status: status\n      };\n      const response = await createBuilding(building);\n      if (response && response.status === \"success\") {\n        setCount(prevCount => prevCount + 1);\n        toast.success(t(\"buildings.validation.add_msg\"));\n        setName(\"\");\n        setStatus(\"\");\n        building.build_id = response.message.build_id;\n        building.create_date = new Date();\n        building.edit_date = new Date();\n        const _buildings = [...buildings];\n        _buildings.unshift(building);\n        setBuildings(_buildings);\n        toggle();\n      } else {\n        toast.error(t(\"buildings.validation.err_add\"));\n      }\n    } catch (error) {\n      if (error.name === \"ValidationError\") {\n        const errors = {};\n        error.inner.forEach(e => {\n          errors[e.path] = e.message;\n        });\n        setValidationErrors(errors);\n      }\n    }\n  };\n  const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ModalWrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_c = ModalWrapper;\nexport default ModalWrapper;\nvar _c;\n$RefreshReg$(_c, \"ModalWrapper\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ModalWrapper","isOpen","toggle","buildings","setBuildings","setCount","selectedRow","handleAddBuilding","validationSchema","validate","build_name","name","build_status","status","abortEarly","building","response","createBuilding","prevCount","toast","success","t","setName","setStatus","build_id","message","create_date","Date","edit_date","_buildings","unshift","error","errors","inner","forEach","e","path","setValidationErrors","handleAction","handleEditBuilding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Task/Task_Development/frontend/src/components/ModalWrapper.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst ModalWrapper = ({\r\n    isOpen,\r\n    toggle,\r\n    buildings,\r\n    setBuildings,\r\n    setCount,\r\n    selectedRow,\r\n    // updateListingData,\r\n  }) => {\r\n\r\n\r\n\r\n\r\n    // const handleEditBuilding = async () => {\r\n    //     try {\r\n      \r\n    //       const editedBuilding = {\r\n    //         build_id: selectedRow?.build_id,\r\n    //         build_name: name,\r\n    //         build_status: status,\r\n    //       };\r\n    \r\n    //       const response = await editBuilding(editedBuilding);\r\n    \r\n    //       if (response && response.status === \"success\") {\r\n    //         toast.success(t(\"buildings.validation.edit_msg\"));\r\n    //         updateListingData(editedBuilding);\r\n    //         toggle();\r\n    //       } else {\r\n    //         toast.error(t(\"buildings.validation.err_edit\"));\r\n    //       }\r\n    //     } catch (error) {\r\n    //       if (error.name === \"ValidationError\") {\r\n    //         const errors = {};\r\n    //         error.inner.forEach((e) => {\r\n    //           errors[e.path] = e.message;\r\n    //         });\r\n    //         setValidationErrors(errors);\r\n    //       }\r\n    //     }\r\n    //   };\r\n      \r\n\r\n      \r\n\r\n    const handleAddBuilding = async () => {\r\n      try {\r\n        await validationSchema.validate(\r\n          { build_name: name, build_status: status },\r\n          { abortEarly: false }\r\n        );\r\n  \r\n        const building = {\r\n          build_name: name,\r\n          build_status: status,\r\n        };\r\n  \r\n        const response = await createBuilding(building);\r\n  \r\n        if (response && response.status === \"success\") {\r\n          setCount((prevCount) => prevCount + 1);\r\n          toast.success(t(\"buildings.validation.add_msg\"));\r\n  \r\n          setName(\"\");\r\n          setStatus(\"\");\r\n  \r\n          building.build_id = response.message.build_id;\r\n          building.create_date = new Date();\r\n          building.edit_date = new Date();\r\n  \r\n          const _buildings = [...buildings];\r\n          _buildings.unshift(building);\r\n          setBuildings(_buildings);\r\n  \r\n          toggle();\r\n        } else {\r\n          toast.error(t(\"buildings.validation.err_add\"));\r\n        }\r\n      } catch (error) {\r\n        if (error.name === \"ValidationError\") {\r\n          const errors = {};\r\n          error.inner.forEach((e) => {\r\n            errors[e.path] = e.message;\r\n          });\r\n  \r\n          setValidationErrors(errors);\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleAction = selectedRow ? handleEditBuilding : handleAddBuilding;\r\n  \r\n\r\n  return (\r\n    <div>ModalWrapper</div>\r\n  )\r\n}\r\n\r\nexport default ModalWrapper"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,YAAY,GAAGA,CAAC;EAClBC,MAAM;EACNC,MAAM;EACNC,SAAS;EACTC,YAAY;EACZC,QAAQ;EACRC;EACA;AACF,CAAC,KAAK;EAKJ;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAKA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,gBAAgB,CAACC,QAAQ,CAC7B;QAAEC,UAAU,EAAEC,IAAI;QAAEC,YAAY,EAAEC;MAAO,CAAC,EAC1C;QAAEC,UAAU,EAAE;MAAM,CACtB,CAAC;MAED,MAAMC,QAAQ,GAAG;QACfL,UAAU,EAAEC,IAAI;QAChBC,YAAY,EAAEC;MAChB,CAAC;MAED,MAAMG,QAAQ,GAAG,MAAMC,cAAc,CAACF,QAAQ,CAAC;MAE/C,IAAIC,QAAQ,IAAIA,QAAQ,CAACH,MAAM,KAAK,SAAS,EAAE;QAC7CR,QAAQ,CAAEa,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QACtCC,KAAK,CAACC,OAAO,CAACC,CAAC,CAAC,8BAA8B,CAAC,CAAC;QAEhDC,OAAO,CAAC,EAAE,CAAC;QACXC,SAAS,CAAC,EAAE,CAAC;QAEbR,QAAQ,CAACS,QAAQ,GAAGR,QAAQ,CAACS,OAAO,CAACD,QAAQ;QAC7CT,QAAQ,CAACW,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;QACjCZ,QAAQ,CAACa,SAAS,GAAG,IAAID,IAAI,CAAC,CAAC;QAE/B,MAAME,UAAU,GAAG,CAAC,GAAG1B,SAAS,CAAC;QACjC0B,UAAU,CAACC,OAAO,CAACf,QAAQ,CAAC;QAC5BX,YAAY,CAACyB,UAAU,CAAC;QAExB3B,MAAM,CAAC,CAAC;MACV,CAAC,MAAM;QACLiB,KAAK,CAACY,KAAK,CAACV,CAAC,CAAC,8BAA8B,CAAC,CAAC;MAChD;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd,IAAIA,KAAK,CAACpB,IAAI,KAAK,iBAAiB,EAAE;QACpC,MAAMqB,MAAM,GAAG,CAAC,CAAC;QACjBD,KAAK,CAACE,KAAK,CAACC,OAAO,CAAEC,CAAC,IAAK;UACzBH,MAAM,CAACG,CAAC,CAACC,IAAI,CAAC,GAAGD,CAAC,CAACV,OAAO;QAC5B,CAAC,CAAC;QAEFY,mBAAmB,CAACL,MAAM,CAAC;MAC7B;IACF;EACF,CAAC;EAKD,MAAMM,YAAY,GAAGhC,WAAW,GAAGiC,kBAAkB,GAAGhC,iBAAiB;EAG3E,oBACER,OAAA;IAAAyC,QAAA,EAAK;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE3B,CAAC;AAAAC,EAAA,GAnGK7C,YAAY;AAqGlB,eAAeA,YAAY;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}